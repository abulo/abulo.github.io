<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://abulo.github.io/"/>
  <updated>2019-01-06T12:33:06.811Z</updated>
  <id>http://abulo.github.io/</id>
  
  <author>
    <name>Abulo Hoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自学 Golang 第一课(语言基础)</title>
    <link href="http://abulo.github.io/2019/01/06/%E8%87%AA%E5%AD%A6-Golang-%E7%AC%AC%E4%B8%80%E8%AF%BE-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://abulo.github.io/2019/01/06/自学-Golang-第一课-语言基础/</id>
    <published>2019-01-06T11:41:00.000Z</published>
    <updated>2019-01-06T12:33:06.811Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Go标识符 </strong></p><p>标识符是用来干什么的?</p><p>标识符是用来命名变量,类型等内容,标识符由字母(A-Z 或者 a-z),数字(0-9),下划线组成,特别需要注意的是第一个必须是字母或者下划线,标识符不允许使用系统内置的关键字</p><p><strong> Go关键字 </strong></p><table><thead><tr><th style="text-align:left">break</th><th style="text-align:left">default</th><th style="text-align:left">func</th><th style="text-align:left">interface</th><th style="text-align:left">select</th></tr></thead><tbody><tr><td style="text-align:left">case</td><td style="text-align:left">defer</td><td style="text-align:left">go</td><td style="text-align:left">map</td><td style="text-align:left">struct</td></tr><tr><td style="text-align:left">chan</td><td style="text-align:left">else</td><td style="text-align:left">goto</td><td style="text-align:left">package</td><td style="text-align:left">switch</td></tr><tr><td style="text-align:left">const</td><td style="text-align:left">fallthrough</td><td style="text-align:left">if</td><td style="text-align:left">range</td><td style="text-align:left">type</td></tr><tr><td style="text-align:left">contiue</td><td style="text-align:left">for</td><td style="text-align:left">import</td><td style="text-align:left">return</td><td style="text-align:left">var</td></tr></tbody></table><p><strong>Go预定义标识符</strong></p><table><thead><tr><th style="text-align:left">append</th><th style="text-align:left">copy</th><th style="text-align:left">int8</th><th style="text-align:left">nil</th><th style="text-align:left">true</th></tr></thead><tbody><tr><td style="text-align:left">bool</td><td style="text-align:left">delete</td><td style="text-align:left">int16</td><td style="text-align:left">panic</td><td style="text-align:left">uint</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:left">error</td><td style="text-align:left">int32</td><td style="text-align:left">print</td><td style="text-align:left">uint8</td></tr><tr><td style="text-align:left">cap</td><td style="text-align:left">false</td><td style="text-align:left">int64</td><td style="text-align:left">println</td><td style="text-align:left">uint16</td></tr><tr><td style="text-align:left">close</td><td style="text-align:left">float32</td><td style="text-align:left">iota</td><td style="text-align:left">real</td><td style="text-align:left">uint32</td></tr><tr><td style="text-align:left">complex</td><td style="text-align:left">float64</td><td style="text-align:left">len</td><td style="text-align:left">recover</td><td style="text-align:left">uint64</td></tr><tr><td style="text-align:left">complex64</td><td style="text-align:left">imag</td><td style="text-align:left">make</td><td style="text-align:left">rune</td><td style="text-align:left">uintptr</td></tr><tr><td style="text-align:left">complex128</td><td style="text-align:left">int</td><td style="text-align:left">new</td><td style="text-align:left">string</td></tr></tbody></table><p><strong>常量和变量</strong></p><p>常量使用 <code>const</code> 声明,变量使用 <code>var</code> 声明,也可以使用快捷键变量声明,Go可以根据变量的内容自动判断变量类型.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const limit = 512//常量,其类型兼容任何数字</span><br><span class="line">const top uint16 = 1421//常量,类型:uint16</span><br><span class="line">start := -19//变量,类型判断int</span><br><span class="line">end := int64(9876543210)//变量,类型int64</span><br><span class="line">var i int//变量,类型int,默认值 0</span><br><span class="line">var debug = false //变量,类型bool</span><br><span class="line">checkResults := true //变量,类型bool</span><br><span class="line">j := 1.5 //变量,类型float64</span><br><span class="line">s := &quot;string&quot; //变量,类型string</span><br></pre></td></tr></table></figure><p>对于整型字面量 Go 推断为 int,对于浮点型字面量 Go 推断为 float64,对于复数型字面量 Go 推断为 complex128 </p><p>变量 i 未初始化,Go 会将 0 赋值给该变量,<br>如果该变量声明的是一个未初始化的字符串,Go会将空字符赋值给该变量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; Go标识符 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;标识符是用来干什么的?&lt;/p&gt;
&lt;p&gt;标识符是用来命名变量,类型等内容,标识符由字母(A-Z 或者 a-z),数字(0-9),下划线组成,特别需要注意的是第一个必须是字母或者下划线,标识符不允许使用系统内置的关
      
    
    </summary>
    
      <category term="Golang" scheme="http://abulo.github.io/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>新年计划</title>
    <link href="http://abulo.github.io/2019/01/06/%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    <id>http://abulo.github.io/2019/01/06/新年计划/</id>
    <published>2019-01-06T11:30:00.000Z</published>
    <updated>2019-01-06T11:35:58.745Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 新年计划 </strong></p><p>1.学习一门新的计算机语言,初步暂定Golang</p><p>2.看几本有意义的书</p><p>3.坚持锻炼身体</p><p>4.亲子互动多一点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 新年计划 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.学习一门新的计算机语言,初步暂定Golang&lt;/p&gt;
&lt;p&gt;2.看几本有意义的书&lt;/p&gt;
&lt;p&gt;3.坚持锻炼身体&lt;/p&gt;
&lt;p&gt;4.亲子互动多一点&lt;/p&gt;

      
    
    </summary>
    
      <category term="杂谈" scheme="http://abulo.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis.conf 中文版</title>
    <link href="http://abulo.github.io/2009/05/14/Redis-conf-%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://abulo.github.io/2009/05/14/Redis-conf-中文版/</id>
    <published>2009-05-14T05:41:00.000Z</published>
    <updated>2019-01-06T11:16:44.463Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line"># Redis示例配置文件</span><br><span class="line"></span><br><span class="line"># 注意单位问题：当需要设置内存大小的时候，可以使用类似1k、5GB、4M这样的常见格式：</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># 单位是大小写不敏感的，所以1GB 1Gb 1gB的写法都是完全一样的。</span><br><span class="line"></span><br><span class="line"># Redis默认是不作为守护进程来运行的。你可以把这个设置为&quot;yes&quot;让它作为守护进程来运行。</span><br><span class="line"># 注意，当作为守护进程的时候，Redis会把进程ID写到 /var/run/redis.pid</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 当以守护进程方式运行的时候，Redis会把进程ID默认写到 /var/run/redis.pid。你可以在这里修改路径。</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"># 接受连接的特定端口，默认是6379。</span><br><span class="line"># 如果端口设置为0，Redis就不会监听TCP套接字。</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 如果你想的话，你可以绑定单一接口；如果这里没单独设置，那么所有接口的连接都会被监听。</span><br><span class="line">#</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 指定用来监听连接的unxi套接字的路径。这个没有默认值，所以如果你不指定的话，Redis就不会通过unix套接字来监听。</span><br><span class="line">#</span><br><span class="line"># unixsocket /tmp/redis.sock</span><br><span class="line"># unixsocketperm 755</span><br><span class="line"></span><br><span class="line">#一个客户端空闲多少秒后关闭连接。(0代表禁用，永不关闭)</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># 设置服务器调试等级。</span><br><span class="line"># 可能值：</span><br><span class="line"># debug （很多信息，对开发/测试有用）</span><br><span class="line"># verbose （很多精简的有用信息，但是不像debug等级那么多）</span><br><span class="line"># notice （适量的信息，基本上是你生产环境中需要的程度）</span><br><span class="line"># warning （只有很重要/严重的信息会记录下来）</span><br><span class="line">loglevel verbose</span><br><span class="line"></span><br><span class="line"># 指明日志文件名。也可以使用&quot;stdout&quot;来强制让Redis把日志信息写到标准输出上。</span><br><span class="line"># 注意：如果Redis以守护进程方式运行，而你设置日志显示到标准输出的话，那么日志会发送到 /dev/null</span><br><span class="line">logfile stdout</span><br><span class="line"></span><br><span class="line"># 要使用系统日志记录器很简单，只要设置 &quot;syslog-enabled&quot; 为 &quot;yes&quot; 就可以了。</span><br><span class="line"># 然后根据需要设置其他一些syslog参数就可以了。</span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"># 指明syslog身份</span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"># 指明syslog的设备。必须是一个用户或者是 LOCAL0 ~ LOCAL7 之一。</span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"># 设置数据库个数。默认数据库是 DB 0，你可以通过SELECT &lt;dbid&gt; WHERE dbid（0～&apos;databases&apos; - 1）来为每个连接使用不同的数据库。</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">################################ 快照 #################################</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 把数据库存到磁盘上:</span><br><span class="line">#</span><br><span class="line">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">#</span><br><span class="line">#   会在指定秒数和数据变化次数之后把数据库写到磁盘上。</span><br><span class="line">#</span><br><span class="line">#   下面的例子将会进行把数据写入磁盘的操作:</span><br><span class="line">#   900秒（15分钟）之后，且至少1次变更</span><br><span class="line">#   300秒（5分钟）之后，且至少10次变更</span><br><span class="line">#   60秒之后，且至少10000次变更</span><br><span class="line">#</span><br><span class="line">#   注意：你要想不写磁盘的话就把所有 &quot;save&quot; 设置注释掉就行了。</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># 当导出到 .rdb 数据库时是否用LZF压缩字符串对象。</span><br><span class="line"># 默认设置为 &quot;yes&quot;，所以几乎总是生效的。</span><br><span class="line"># 如果你想节省CPU的话你可以把这个设置为 &quot;no&quot;，但是如果你有可压缩的key的话，那数据文件就会更大了。</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 数据库的文件名</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 工作目录</span><br><span class="line">#</span><br><span class="line"># 数据库会写到这个目录下，文件名就是上面的 &quot;dbfilename&quot; 的值。</span><br><span class="line">#</span><br><span class="line"># 累加文件也放这里。</span><br><span class="line">#</span><br><span class="line"># 注意你这里指定的必须是目录，不是文件名。</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">################################# 同步 #################################</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 主从同步。通过 slaveof 配置来实现Redis实例的备份。</span><br><span class="line"># 注意，这里是本地从远端复制数据。也就是说，本地可以有不同的数据库文件、绑定不同的IP、监听不同的端口。</span><br><span class="line">#</span><br><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"># 如果master设置了密码（通过下面的 &quot;requirepass&quot; 选项来配置），那么slave在开始同步之前必须进行身份验证，否则它的同步请求会被拒绝。</span><br><span class="line">#</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line"># 当一个slave失去和master的连接，或者同步正在进行中，slave的行为有两种可能：</span><br><span class="line">#</span><br><span class="line"># 1) 如果 slave-serve-stale-data 设置为 &quot;yes&quot; (默认值)，slave会继续响应客户端请求，可能是正常数据，也可能是还没获得值的空数据。</span><br><span class="line"># 2) 如果 slave-serve-stale-data 设置为 &quot;no&quot;，slave会回复&quot;正在从master同步（SYNC with master in progress）&quot;来处理各种请求，除了 INFO 和 SLAVEOF 命令。</span><br><span class="line">#</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"># slave根据指定的时间间隔向服务器发送ping请求。</span><br><span class="line"># 时间间隔可以通过 repl_ping_slave_period 来设置。</span><br><span class="line"># 默认10秒。</span><br><span class="line">#</span><br><span class="line"># repl-ping-slave-period 10</span><br><span class="line"></span><br><span class="line"># 下面的选项设置了大块数据I/O、向master请求数据和ping响应的过期时间。</span><br><span class="line"># 默认值60秒。</span><br><span class="line">#</span><br><span class="line"># 一个很重要的事情是：确保这个值比 repl-ping-slave-period 大，否则master和slave之间的传输过期时间比预想的要短。</span><br><span class="line">#</span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line">################################## 安全 ###################################</span><br><span class="line"></span><br><span class="line"># 要求客户端在处理任何命令时都要验证身份和密码。</span><br><span class="line"># 这在你信不过来访者时很有用。</span><br><span class="line">#</span><br><span class="line"># 为了向后兼容的话，这段应该注释掉。而且大多数人不需要身份验证（例如：它们运行在自己的服务器上。）</span><br><span class="line">#</span><br><span class="line"># 警告：因为Redis太快了，所以居心不良的人可以每秒尝试150k的密码来试图破解密码。</span><br><span class="line"># 这意味着你需要一个高强度的密码，否则破解太容易了。</span><br><span class="line">#</span><br><span class="line"># requirepass foobared</span><br><span class="line"></span><br><span class="line"># 命令重命名</span><br><span class="line">#</span><br><span class="line"># 在共享环境下，可以为危险命令改变名字。比如，你可以为 CONFIG 改个其他不太容易猜到的名字，这样你自己仍然可以使用，而别人却没法做坏事了。</span><br><span class="line">#</span><br><span class="line"># 例如:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line">#</span><br><span class="line"># 甚至也可以通过给命令赋值一个空字符串来完全禁用这条命令：</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG &quot;&quot;</span><br><span class="line"></span><br><span class="line">################################### 限制 ####################################</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 设置最多同时连接客户端数量。</span><br><span class="line"># 默认没有限制，这个关系到Redis进程能够打开的文件描述符数量。</span><br><span class="line"># 特殊值&quot;0&quot;表示没有限制。</span><br><span class="line"># 一旦达到这个限制，Redis会关闭所有新连接并发送错误&quot;达到最大用户数上限（max number of clients reached）&quot;</span><br><span class="line">#</span><br><span class="line"># maxclients 128</span><br><span class="line"></span><br><span class="line"># 不要用比设置的上限更多的内存。一旦内存使用达到上限，Redis会根据选定的回收策略（参见：maxmemmory-policy）删除key。</span><br><span class="line">#</span><br><span class="line"># 如果因为删除策略问题Redis无法删除key，或者策略设置为 &quot;noeviction&quot;，Redis会回复需要更多内存的错误信息给命令。</span><br><span class="line"># 例如，SET,LPUSH等等。但是会继续合理响应只读命令，比如：GET。</span><br><span class="line">#</span><br><span class="line"># 在使用Redis作为LRU缓存，或者为实例设置了硬性内存限制的时候（使用 &quot;noeviction&quot; 策略）的时候，这个选项还是满有用的。</span><br><span class="line">#</span><br><span class="line"># 警告：当一堆slave连上达到内存上限的实例的时候，响应slave需要的输出缓存所需内存不计算在使用内存当中。</span><br><span class="line"># 这样当请求一个删除掉的key的时候就不会触发网络问题／重新同步的事件，然后slave就会收到一堆删除指令，直到数据库空了为止。</span><br><span class="line">#</span><br><span class="line"># 简而言之，如果你有slave连上一个master的话，那建议你把master内存限制设小点儿，确保有足够的系统内存用作输出缓存。</span><br><span class="line"># （如果策略设置为&quot;noeviction&quot;的话就不无所谓了）</span><br><span class="line">#</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># 内存策略：如果达到内存限制了，Redis如何删除key。你可以在下面五个策略里面选：</span><br><span class="line">#</span><br><span class="line"># volatile-lru -&gt; 根据LRU算法生成的过期时间来删除。</span><br><span class="line"># allkeys-lru -&gt; 根据LRU算法删除任何key。</span><br><span class="line"># volatile-random -&gt; 根据过期设置来随机删除key。</span><br><span class="line"># allkeys-&gt;random -&gt; 无差别随机删。</span><br><span class="line"># volatile-ttl -&gt; 根据最近过期时间来删除（辅以TTL）</span><br><span class="line"># noeviction -&gt; 谁也不删，直接在写操作时返回错误。</span><br><span class="line">#</span><br><span class="line"># 注意：对所有策略来说，如果Redis找不到合适的可以删除的key都会在写操作时返回一个错误。</span><br><span class="line">#</span><br><span class="line">#       这里涉及的命令：set setnx setex append</span><br><span class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line">#       getset mset msetnx exec sort</span><br><span class="line">#</span><br><span class="line"># 默认值如下：</span><br><span class="line">#</span><br><span class="line"># maxmemory-policy volatile-lru</span><br><span class="line"></span><br><span class="line"># LRU和最小TTL算法的实现都不是很精确，但是很接近（为了省内存），所以你可以用样例做测试。</span><br><span class="line"># 例如：默认Redis会检查三个key然后取最旧的那个，你可以通过下面的配置项来设置样本的个数。</span><br><span class="line">#</span><br><span class="line"># maxmemory-samples 3</span><br><span class="line"></span><br><span class="line">############################## 纯累加模式 ###############################</span><br><span class="line"></span><br><span class="line"># 默认情况下，Redis是异步的把数据导出到磁盘上。这种情况下，当Redis挂掉的时候，最新的数据就丢了。</span><br><span class="line"># 如果不希望丢掉任何一条数据的话就该用纯累加模式：一旦开启这个模式，Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件。</span><br><span class="line"># 每次启动时Redis都会把这个文件的数据读入内存里。</span><br><span class="line">#</span><br><span class="line"># 注意，异步导出的数据库文件和纯累加文件可以并存（你得把上面所有&quot;save&quot;设置都注释掉，关掉导出机制）。</span><br><span class="line"># 如果纯累加模式开启了，那么Redis会在启动时载入日志文件而忽略导出的 dump.rdb 文件。</span><br><span class="line">#</span><br><span class="line"># 重要：查看 BGREWRITEAOF 来了解当累加日志文件太大了之后，怎么在后台重新处理这个日志文件。</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># 纯累加文件名字（默认：&quot;appendonly.aof&quot;）</span><br><span class="line"># appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line"># fsync() 请求操作系统马上把数据写到磁盘上，不要再等了。</span><br><span class="line"># 有些操作系统会真的把数据马上刷到磁盘上；有些则要磨蹭一下，但是会尽快去做。</span><br><span class="line">#</span><br><span class="line"># Redis支持三种不同的模式：</span><br><span class="line">#</span><br><span class="line"># no：不要立刻刷，只有在操作系统需要刷的时候再刷。比较快。</span><br><span class="line"># always：每次写操作都立刻写入到aof文件。慢，但是最安全。</span><br><span class="line"># everysec：每秒写一次。折衷方案。</span><br><span class="line">#</span><br><span class="line"># 默认的 &quot;everysec&quot; 通常来说能在速度和数据安全性之间取得比较好的平衡。</span><br><span class="line"># 如果你真的理解了这个意味着什么，那么设置&quot;no&quot;可以获得更好的性能表现（如果丢数据的话，则只能拿到一个不是很新的快照）；</span><br><span class="line"># 或者相反的，你选择 &quot;always&quot; 来牺牲速度确保数据安全、完整。</span><br><span class="line">#</span><br><span class="line"># 如果拿不准，就用 &quot;everysec&quot;</span><br><span class="line"></span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># 如果AOF的同步策略设置成 &quot;always&quot; 或者 &quot;everysec&quot;，那么后台的存储进程（后台存储或写入AOF日志）会产生很多磁盘I/O开销。</span><br><span class="line"># 某些Linux的配置下会使Redis因为 fsync() 而阻塞很久。</span><br><span class="line"># 注意，目前对这个情况还没有完美修正，甚至不同线程的 fsync() 会阻塞我们的 write(2) 请求。</span><br><span class="line">#</span><br><span class="line"># 为了缓解这个问题，可以用下面这个选项。它可以在 BGSAVE 或 BGREWRITEAOF 处理时阻止 fsync()。</span><br><span class="line">#</span><br><span class="line"># 这就意味着如果有子进程在进行保存操作，那么Redis就处于&quot;不可同步&quot;的状态。</span><br><span class="line"># 这实际上是说，在最差的情况下可能会丢掉30秒钟的日志数据。（默认Linux设定）</span><br><span class="line">#</span><br><span class="line"># 如果你有延迟的问题那就把这个设为 &quot;yes&quot;，否则就保持 &quot;no&quot;，这是保存持久数据的最安全的方式。</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># 自动重写AOF文件</span><br><span class="line">#</span><br><span class="line"># 如果AOF日志文件大到指定百分比，Redis能够通过 BGREWRITEAOF 自动重写AOF日志文件。</span><br><span class="line">#</span><br><span class="line"># 工作原理：Redis记住上次重写时AOF日志的大小（或者重启后没有写操作的话，那就直接用此时的AOF文件），</span><br><span class="line">#           基准尺寸和当前尺寸做比较。如果当前尺寸超过指定比例，就会触发重写操作。</span><br><span class="line">#</span><br><span class="line"># 你还需要指定被重写日志的最小尺寸，这样避免了达到约定百分比但尺寸仍然很小的情况还要重写。</span><br><span class="line">#</span><br><span class="line"># 指定百分比为0会禁用AOF自动重写特性。</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">################################## 慢查询日志 ###################################</span><br><span class="line"></span><br><span class="line"># Redis慢查询日志可以记录超过指定时间的查询。运行时间不包括各种I/O时间。</span><br><span class="line"># 例如：连接客户端，发送响应数据等。只计算命令运行的实际时间（这是唯一一种命令运行线程阻塞而无法同时为其他请求服务的场景）</span><br><span class="line">#</span><br><span class="line"># 你可以为慢查询日志配置两个参数：一个是超标时间，单位为微妙，记录超过个时间的命令。</span><br><span class="line"># 另一个是慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。</span><br><span class="line">#</span><br><span class="line"># 下面的时间单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"># 这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。（译者注：日志居然是在内存里的Orz）</span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line">################################ 虚拟内存 ###############################</span><br><span class="line"></span><br><span class="line">### 警告！虚拟内存在Redis 2.4是反对的。</span><br><span class="line">### 非常不鼓励使用虚拟内存！！</span><br><span class="line"></span><br><span class="line"># 虚拟内存可以使Redis在内存不够的情况下仍然可以将所有数据序列保存在内存里。</span><br><span class="line"># 为了做到这一点，高频key会调到内存里，而低频key会转到交换文件里，就像操作系统使用内存页一样。</span><br><span class="line">#</span><br><span class="line"># 要使用虚拟内存，只要把 &quot;vm-enabled&quot; 设置为 &quot;yes&quot;，并根据需要设置下面三个虚拟内存参数就可以了。</span><br><span class="line"></span><br><span class="line">vm-enabled no</span><br><span class="line"># vm-enabled yes</span><br><span class="line"></span><br><span class="line"># 这是交换文件的路径。估计你猜到了，交换文件不能在多个Redis实例之间共享，所以确保每个Redis实例使用一个独立交换文件。</span><br><span class="line">#</span><br><span class="line"># 最好的保存交换文件（被随机访问）的介质是固态硬盘（SSD）。</span><br><span class="line">#</span><br><span class="line"># *** 警告 *** 如果你使用共享主机，那么默认的交换文件放到 /tmp 下是不安全的。</span><br><span class="line"># 创建一个Redis用户可写的目录，并配置Redis在这里创建交换文件。</span><br><span class="line">vm-swap-file /tmp/redis.swap</span><br><span class="line"></span><br><span class="line"># &quot;vm-max-memory&quot; 配置虚拟内存可用的最大内存容量。</span><br><span class="line"># 如果交换文件还有空间的话，所有超标部分都会放到交换文件里。</span><br><span class="line">#</span><br><span class="line"># &quot;vm-max-memory&quot; 设置为0表示系统会用掉所有可用内存。</span><br><span class="line"># 这默认值不咋地，只是把你能用的内存全用掉了，留点余量会更好。</span><br><span class="line"># 例如，设置为剩余内存的60%-80%。</span><br><span class="line">vm-max-memory 0</span><br><span class="line"></span><br><span class="line"># Redis交换文件是分成多个数据页的。</span><br><span class="line"># 一个可存储对象可以被保存在多个连续页里，但是一个数据页无法被多个对象共享。</span><br><span class="line"># 所以，如果你的数据页太大，那么小对象就会浪费掉很多空间。</span><br><span class="line"># 如果数据页太小，那用于存储的交换空间就会更少（假定你设置相同的数据页数量）</span><br><span class="line">#</span><br><span class="line"># 如果你使用很多小对象，建议分页尺寸为64或32个字节。</span><br><span class="line"># 如果你使用很多大对象，那就用大一些的尺寸。</span><br><span class="line"># 如果不确定，那就用默认值 :)</span><br><span class="line">vm-page-size 32</span><br><span class="line"></span><br><span class="line"># 交换文件里数据页总数。</span><br><span class="line"># 根据内存中分页表（已用/未用的数据页分布情况），磁盘上每8个数据页会消耗内存里1个字节。</span><br><span class="line">#</span><br><span class="line"># 交换区容量 = vm-page-size * vm-pages</span><br><span class="line">#</span><br><span class="line"># 根据默认的32字节的数据页尺寸和134217728的数据页数来算，Redis的数据页文件会占4GB，而内存里的分页表会消耗16MB内存。</span><br><span class="line">#</span><br><span class="line"># 为你的应验程序设置最小且够用的数字比较好，下面这个默认值在大多数情况下都是偏大的。</span><br><span class="line">vm-pages 134217728</span><br><span class="line"></span><br><span class="line"># 同时可运行的虚拟内存I/O线程数。</span><br><span class="line"># 这些线程可以完成从交换文件进行数据读写的操作，也可以处理数据在内存与磁盘间的交互和编码/解码处理。</span><br><span class="line"># 多一些线程可以一定程度上提高处理效率，虽然I/O操作本身依赖于物理设备的限制，不会因为更多的线程而提高单次读写操作的效率。</span><br><span class="line">#</span><br><span class="line"># 特殊值0会关闭线程级I/O，并会开启阻塞虚拟内存机制。</span><br><span class="line">vm-max-threads 4</span><br><span class="line"></span><br><span class="line">############################### 高级配置 ###############################</span><br><span class="line"></span><br><span class="line"># 当有大量数据时，适合用哈希编码（需要更多的内存），元素数量上限不能超过给定限制。</span><br><span class="line"># 你可以通过下面的选项来设定这些限制：</span><br><span class="line">hash-max-zipmap-entries 512</span><br><span class="line">hash-max-zipmap-value 64</span><br><span class="line"></span><br><span class="line"># 与哈希相类似，数据元素较少的情况下，可以用另一种方式来编码从而节省大量空间。</span><br><span class="line"># 这种方式只有在符合下面限制的时候才可以用：</span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"># 还有这样一种特殊编码的情况：数据全是64位无符号整型数字构成的字符串。</span><br><span class="line"># 下面这个配置项就是用来限制这种情况下使用这种编码的最大上限的。</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"># 与第一、第二种情况相似，有序序列也可以用一种特别的编码方式来处理，可节省大量空间。</span><br><span class="line"># 这种编码只适合长度和元素都符合下面限制的有序序列：</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"># 哈希刷新，每100个CPU毫秒会拿出1个毫秒来刷新Redis的主哈希表（顶级键值映射表）。</span><br><span class="line"># redis所用的哈希表实现（见dict.c）采用延迟哈希刷新机制：你对一个哈希表操作越多，哈希刷新操作就越频繁；</span><br><span class="line"># 反之，如果服务器非常不活跃那么也就是用点内存保存哈希表而已。</span><br><span class="line">#</span><br><span class="line"># 默认是每秒钟进行10次哈希表刷新，用来刷新字典，然后尽快释放内存。</span><br><span class="line">#</span><br><span class="line"># 建议：</span><br><span class="line"># 如果你对延迟比较在意的话就用 &quot;activerehashing no&quot;，每个请求延迟2毫秒不太好嘛。</span><br><span class="line"># 如果你不太在意延迟而希望尽快释放内存的话就设置 &quot;activerehashing yes&quot;。</span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">################################## 包含 ###################################</span><br><span class="line"></span><br><span class="line"># 包含一个或多个其他配置文件。</span><br><span class="line"># 这在你有标准配置模板但是每个redis服务器又需要个性设置的时候很有用。</span><br><span class="line"># 包含文件特性允许你引人其他配置文件，所以好好利用吧。</span><br><span class="line">#</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Redis" scheme="http://abulo.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://abulo.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python DBUtils数据连接池与MySQL配合用法</title>
    <link href="http://abulo.github.io/2009/05/06/Python-DBUtils%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8EMySQL%E9%85%8D%E5%90%88%E7%94%A8%E6%B3%95/"/>
    <id>http://abulo.github.io/2009/05/06/Python-DBUtils数据连接池与MySQL配合用法/</id>
    <published>2009-05-06T08:53:00.000Z</published>
    <updated>2019-01-06T09:03:59.729Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">desc:数据库操作类</span><br><span class="line">@note:</span><br><span class="line">1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</span><br><span class="line">２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别</span><br><span class="line">３、在输入的值中不需要使用转意函数，系统会自动处理</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import MySQLdb</span><br><span class="line">from MySQLdb.cursors import DictCursor</span><br><span class="line">from DBUtils.PooledDB import PooledDB</span><br><span class="line"></span><br><span class="line">import Config</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Config是一些数据库的配置文件</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class Mysql(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现</span><br><span class="line">        获取连接对象：conn = Mysql.getConn()</span><br><span class="line">        释放连接对象;conn.close()或del conn</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    #连接池对象</span><br><span class="line">    __pool = None</span><br><span class="line">    def __init__(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        数据库构造函数，从连接池中取出连接，并生成操作游标</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">#        self._conn = MySQLdb.connect(host=Config.DBHOST , port=Config.DBPORT , user=Config.DBUSER , passwd=Config.DBPWD ,</span><br><span class="line">#                              db=Config.DBNAME,use_unicode=False,charset=Config.DBCHAR,cursorclass=DictCursor)</span><br><span class="line">        self._conn = Mysql.__getConn()</span><br><span class="line">        self._cursor = self._conn.cursor()</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def __getConn():</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 静态方法，从连接池中取出连接</span><br><span class="line">        @return MySQLdb.connection</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if Mysql.__pool is None:</span><br><span class="line">            __pool = PooledDB(creator=MySQLdb, mincached=1 , maxcached=20 ,</span><br><span class="line">                              host=Config.DBHOST , port=Config.DBPORT , user=Config.DBUSER , passwd=Config.DBPWD ,</span><br><span class="line">                              db=Config.DBNAME,use_unicode=False,charset=Config.DBCHAR,cursorclass=DictCursor)</span><br><span class="line">        return __pool.connection()</span><br><span class="line"></span><br><span class="line">    def getAll(self,sql,param=None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 执行查询，并取出所有结果集</span><br><span class="line">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span><br><span class="line">        @param param: 可选参数，条件列表值（元组/列表）</span><br><span class="line">        @return: result list/boolean 查询到的结果集</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if param is None:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        else:</span><br><span class="line">            count = self._cursor.execute(sql,param)</span><br><span class="line">        if count&gt;0:</span><br><span class="line">            result = self._cursor.fetchall()</span><br><span class="line">        else:</span><br><span class="line">            result = False</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    def getOne(self,sql,param=None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 执行查询，并取出第一条</span><br><span class="line">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span><br><span class="line">        @param param: 可选参数，条件列表值（元组/列表）</span><br><span class="line">        @return: result list/boolean 查询到的结果集</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if param is None:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        else:</span><br><span class="line">            count = self._cursor.execute(sql,param)</span><br><span class="line">        if count&gt;0:</span><br><span class="line">            result = self._cursor.fetchone()</span><br><span class="line">        else:</span><br><span class="line">            result = False</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    def getMany(self,sql,num,param=None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 执行查询，并取出num条结果</span><br><span class="line">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span><br><span class="line">        @param num:取得的结果条数</span><br><span class="line">        @param param: 可选参数，条件列表值（元组/列表）</span><br><span class="line">        @return: result list/boolean 查询到的结果集</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if param is None:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        else:</span><br><span class="line">            count = self._cursor.execute(sql,param)</span><br><span class="line">        if count&gt;0:</span><br><span class="line">            result = self._cursor.fetchmany(num)</span><br><span class="line">        else:</span><br><span class="line">            result = False</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    def insertOne(self,sql,value):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 向数据表插入一条记录</span><br><span class="line">        @param sql:要插入的ＳＱＬ格式</span><br><span class="line">        @param value:要插入的记录数据tuple/list</span><br><span class="line">        @return: insertId 受影响的行数</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self._cursor.execute(sql,value)</span><br><span class="line">        return self.__getInsertId()</span><br><span class="line"></span><br><span class="line">    def insertMany(self,sql,values):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 向数据表插入多条记录</span><br><span class="line">        @param sql:要插入的ＳＱＬ格式</span><br><span class="line">        @param values:要插入的记录数据tuple(tuple)/list[list]</span><br><span class="line">        @return: count 受影响的行数</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        count = self._cursor.executemany(sql,values)</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def __getInsertId(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取当前连接最后一次插入操作生成的id,如果没有则为０</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self._cursor.execute(&quot;SELECT @@IDENTITY AS id&quot;)</span><br><span class="line">        result = self._cursor.fetchall()</span><br><span class="line">        return result[0][&apos;id&apos;]</span><br><span class="line"></span><br><span class="line">    def __query(self,sql,param=None):</span><br><span class="line">        if param is None:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        else:</span><br><span class="line">            count = self._cursor.execute(sql,param)</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self,sql,param=None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 更新数据表记录</span><br><span class="line">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span><br><span class="line">        @param param: 要更新的  值 tuple/list</span><br><span class="line">        @return: count 受影响的行数</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.__query(sql,param)</span><br><span class="line"></span><br><span class="line">    def delete(self,sql,param=None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 删除数据表记录</span><br><span class="line">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span><br><span class="line">        @param param: 要删除的条件 值 tuple/list</span><br><span class="line">        @return: count 受影响的行数</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.__query(sql,param)</span><br><span class="line"></span><br><span class="line">    def begin(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 开启事务</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self._conn.autocommit(0)</span><br><span class="line"></span><br><span class="line">    def end(self,option=&apos;commit&apos;):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 结束事务</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if option==&apos;commit&apos;:</span><br><span class="line">            self._conn.commit()</span><br><span class="line">        else:</span><br><span class="line">            self._conn.rollback()</span><br><span class="line"></span><br><span class="line">    def dispose(self,isEnd=1):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        @summary: 释放连接池资源</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if isEnd==1:</span><br><span class="line">            self.end(&apos;commit&apos;)</span><br><span class="line">        else:</span><br><span class="line">            self.end(&apos;rollback&apos;);</span><br><span class="line">        self._cursor.close()</span><br><span class="line">        self._conn.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Python" scheme="http://abulo.github.io/categories/Python/"/>
    
      <category term="MySQL" scheme="http://abulo.github.io/categories/Python/MySQL/"/>
    
    
      <category term="Python" scheme="http://abulo.github.io/tags/Python/"/>
    
      <category term="MySQL" scheme="http://abulo.github.io/tags/MySQL/"/>
    
      <category term="DBUtils" scheme="http://abulo.github.io/tags/DBUtils/"/>
    
  </entry>
  
  <entry>
    <title>昨天的影院才是天堂影院</title>
    <link href="http://abulo.github.io/2009/03/20/%E6%98%A8%E5%A4%A9%E7%9A%84%E5%BD%B1%E9%99%A2%E6%89%8D%E6%98%AF%E5%A4%A9%E5%A0%82%E5%BD%B1%E9%99%A2/"/>
    <id>http://abulo.github.io/2009/03/20/昨天的影院才是天堂影院/</id>
    <published>2009-03-20T01:45:00.000Z</published>
    <updated>2019-01-06T08:33:44.898Z</updated>
    
    <content type="html"><![CDATA[<p>这是一场关于梦想的电影往事。</p><p>   二战时期的意大利西西里岛，既流传着一段美丽传说，也孕育着这么一个孩子的梦想：关于理想，关于友情，关于爱情，关于亲情。</p><p>电影梦</p><p>   这个梦想是多多的，也是阿尔夫莱多的，更是朱塞佩·托纳托雷的。我不敢妄称多多就是朱塞佩·托纳托雷童年的幻像，但我知道朱塞佩·托纳托雷肯定也曾做过多多类似的梦——关于电影的梦。同样，那也曾是阿尔夫莱多的梦。阿尔夫莱多知道自己再没有圆梦的机会了，他要多多去圆梦，也是去圆他自己的梦。他不希望多多圆梦的途中会被打扰，会半途而废，甚至不惜于破坏多多与艾列娜的爱情来表示对梦想的虔诚，为多多画出这样一个美丽的梦境，将多多送了出去。他知道人在梦里是不能被打扰的，于是他在车站送行的时候狠狠的抓住多多：不准回来！不准想我们！不准回头！不准写信！不准妥协！忘了我们！</p><p>友情梦</p><p>   多多与阿尔夫莱多忘年的情谊，起源与古怪精灵的多多从阿尔夫莱多的放映室偷胶片开始。封建的神父作为影院的所有者，审片的态度一点也不马虎。胶片剪了又剪，多多的私藏也随着废弃胶片的增多而日益丰富，直至一天因胶片引发的意外火灾险些要了多多妹妹的命，阿尔夫莱多才意识到——这个小鬼原来有着和自己一样的梦，他要培养多多。但是阿尔夫莱多毕竟是成人，他知道多多不可能一辈子都做一名电影放映员，他告诉多多：“生活不是电影，生活比电影苦多了！”特别是在多多救了阿尔夫莱多的命之后，阿尔夫莱多更是将满心的希望都寄托在了多多的身上，他不仅像朋友，更像是父亲般的关爱着多多。最后当多多独自坐在影院欣赏阿尔夫莱多留给自己的遗物时，银幕上还能找到失落的东西，以作回忆的凭据，不免徒生无可奈何花落去的怅惘。</p><p>爱情梦</p><p>   和大多数青春期男孩一样，多多邂逅了美丽的艾列娜，唠下了朝思夜想的心病。随后，寻着阿尔夫莱多故事中士兵足迹的多多，终于用毅力换来了艾列娜的爱情。可是在那样复杂的年代，怎么可能静的下心来谈爱情？何况多多还背负着阿尔夫莱多的电影梦。三十年后多多重归故里，慕然回首，看见梦中人伫立街头，斑斑银发随风飘舞，怎一个感伤了得。当天晚上，这对有情人终于圆了自己三十年前的梦。第二天多多要离开了，挂电话给艾列娜，刚要设想幸福的将来，却被艾列娜打住： “不，没有将来了，只有过去，昨晚只是一场梦而已，一个美好的梦。是我们小时候没实现的梦。。。我想，没有比这样更好的结局了。”</p><p>亲情梦</p><p>   影片的开始就是多多的母亲在给多多挂电话。三十年了，三十年多多都没有回来，没有回来一次看望自己的母亲和妹妹。这次阿尔夫莱多去世，多多应该回来了。餐桌上，多多为自己三十年来对家庭的不闻不问进行忏悔，母亲宽容的摇摇头：“我从未要求，你也无需解释。”接着母亲给多多讲了他小时侯关于门锁的故事，多多沉默不语。三十年了，妹妹对他觉得陌生了，而母亲的爱，却始终没有改变。多多知道，母亲在梦了都盼望着他会在某一天的晚上突然回来。</p><p>   梦终会醒，可是电影要继续，生活也要继续。</p><p>   电影就是将平淡无奇的镜头都剪去以后的人生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一场关于梦想的电影往事。&lt;/p&gt;
&lt;p&gt;   二战时期的意大利西西里岛，既流传着一段美丽传说，也孕育着这么一个孩子的梦想：关于理想，关于友情，关于爱情，关于亲情。&lt;/p&gt;
&lt;p&gt;电影梦&lt;/p&gt;
&lt;p&gt;   这个梦想是多多的，也是阿尔夫莱多的，更是朱塞佩·托纳托雷的。我不
      
    
    </summary>
    
      <category term="影评" scheme="http://abulo.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="电影" scheme="http://abulo.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>英雄和英雄</title>
    <link href="http://abulo.github.io/2008/11/15/%E8%8B%B1%E9%9B%84%E5%92%8C%E8%8B%B1%E9%9B%84/"/>
    <id>http://abulo.github.io/2008/11/15/英雄和英雄/</id>
    <published>2008-11-14T16:44:00.000Z</published>
    <updated>2019-01-06T08:34:37.262Z</updated>
    
    <content type="html"><![CDATA[<p>阿喀琉斯，以前总会唾弃之，他的出色才能，使得野蛮的斯巴达士兵们躲在木马中潜入特洛伊，然后上演对于一个无比文明的国家毁灭性的屠城！他不受暴君的约束，有自己的辨识能力，也有自己独立的个性，当然，更加拥有的，是当时时代下生存和被崇拜的力量——武力，他的格斗术和如此的个性，决定了他只能成为一个英雄，而不是一个君主。 ­</p><p>故事很老土，就是因为特洛伊的二王子，也就是悲剧英雄赫克托耳的弟弟，勾引了希腊第一美女“水性杨花”的海伦，引发了希腊和特洛伊的一场战争。阿喀琉斯，为了自己成为历史上不朽的英雄而被希腊君主利用而战；赫克托耳，为了保护自己那个懦弱不敢承担责任（或者说没有能力承担责任）的弟弟，以及为了保护自己所热爱的子民们而战斗！ ­</p><p>英雄和英雄相遇之际就擦出了火花，他们甚至开始不伤害彼此（虽然也有一些政治因素在此）。而赫克托耳的美丽的表妹被希腊人俘虏后，与阿喀琉斯迸出了爱情的火花，短短的几天内，差点改变一个英雄的铸就，她像刀鞘一样，差点就保护了国家的一切！可是被政治利用了的战争中，永远都是那么不尽人意，赫克托耳错杀了阿喀琉斯的堂弟。命运弄人，最终这个身来就神赐予力量的阿喀琉斯，重上战场，赫克托耳——一个国家的精神支柱就败死在阿喀琉斯的手下！特洛伊就此而没有了胜算。而在之后的木马屠城中，这个可怜的英雄，又死于红颜祸水。虽然有复仇的快感，却也因为阿喀琉斯的死亡而抱憾而叹…… ­</p><p>这就是英雄与英雄！ ­</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿喀琉斯，以前总会唾弃之，他的出色才能，使得野蛮的斯巴达士兵们躲在木马中潜入特洛伊，然后上演对于一个无比文明的国家毁灭性的屠城！他不受暴君的约束，有自己的辨识能力，也有自己独立的个性，当然，更加拥有的，是当时时代下生存和被崇拜的力量——武力，他的格斗术和如此的个性，决定了他
      
    
    </summary>
    
      <category term="影评" scheme="http://abulo.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="电影" scheme="http://abulo.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>The Legend of 1900</title>
    <link href="http://abulo.github.io/2008/10/21/The-Legend-of-1900/"/>
    <id>http://abulo.github.io/2008/10/21/The-Legend-of-1900/</id>
    <published>2008-10-21T13:59:00.000Z</published>
    <updated>2019-01-06T08:34:49.620Z</updated>
    
    <content type="html"><![CDATA[<p>生命像极了一场茫无头绪的冒险，所以我们往往会敬佩那些流连于同一个地方，专注于同一件事情的人。被无常的命运折磨的时候，拒绝改变有时候能提供给人一种安全感。所以《海上钢琴师》从一开始便给了我们很多期待。一个被遗弃在巨型渡轮上的孤儿突然间成了天才的钢琴师，他一辈子都不曾下过这艘船。海、船、来来往往的两千名乘客和他的钢琴构成了他唯一的世界。 ­</p><p>1900的音乐是和他心底始终保有的那些价值分不开的，他弹琴很大程度上是为了不离开他内心那个与世隔绝的世界。但没有印证我们内心的期待，我们不知道这个男人在想什么？他是个英雄还是个疯子？最后那段小号演奏仿佛是在追忆些什么。是的，也许的确是在追忆些什么，但，凭什么追忆呢？</p><p>人是惧怕新环境的，就像我们总喜欢蹲在自己被窝里添伤口一样，我们不只是不想让别人看到自己伤心，还因为我们怀念被子熟悉的味道。。一旦空质量变了，我们的心也就飘荡不定了。。是没有勇气还是我们习惯安逸？是没有本钱还是害怕失败？没有答案，一切都在发生，一切都流逝，生就是死的一部分罢了。。。就像双腿蹲在马桶上一样这么的不可思议又切实存在！ ­</p><p>“Max,我在想我用两只手弹出的音乐，我只希望天堂里也有钢琴！”­</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生命像极了一场茫无头绪的冒险，所以我们往往会敬佩那些流连于同一个地方，专注于同一件事情的人。被无常的命运折磨的时候，拒绝改变有时候能提供给人一种安全感。所以《海上钢琴师》从一开始便给了我们很多期待。一个被遗弃在巨型渡轮上的孤儿突然间成了天才的钢琴师，他一辈子都不曾下过这艘船
      
    
    </summary>
    
      <category term="影评" scheme="http://abulo.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="电影" scheme="http://abulo.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>这就是我</title>
    <link href="http://abulo.github.io/2008/03/28/%E8%BF%99%E5%B0%B1%E6%98%AF%E6%88%91/"/>
    <id>http://abulo.github.io/2008/03/28/这就是我/</id>
    <published>2008-03-28T07:27:00.000Z</published>
    <updated>2019-01-06T07:29:27.674Z</updated>
    
    <content type="html"><![CDATA[<p>顽石无材补苍天 ­</p><p>沦落凡尘二十年 ­</p><p>修成正果还夙愿 ­</p><p>可否邂逅女娲仙 ­</p><p>青城峰下，顽石无材，奈何补苍天？   ­</p><p>余，本一顽石，出自寒门，历二十载，沐山川之灵秀，秉日月之精华，终修成正果，甲申年秋，忝列金榜，得以游学于蓉城。学业既成，足迹遍及川而不得遂其愿也。为衣食计，丁亥年夏，仍郁郁不得志。 ­</p><p>本人爱好甚广 ­</p><p>【$，￥，篮球，足球，台球】 ­</p><p>其余【电脑游戏，饶舌，贫，喝酒，…………】 ­</p><p>本人梦境【愿望理想】混之而言出：“世上出于乌托邦，愿生活于那圣地，步入天堂，漫过神圣走廊，天使笑容让我感到无比慈祥，内心深感舒畅，此地人皆平等，无暴力，纠纷与偏见，至今仍留恋此梦”不安于现状。偶个性隐于开朗之说又隐于内向之说，全仗射手星之罩，宙斯为之袒护，天神四方，不惧万物，乃“天才”自称。口语常念“静享天赐安眠”，自知知足长乐。 ­</p><p>文章本天成，妙手偶得。奉上，不揣固陋，诚惶诚恐。­</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;顽石无材补苍天 ­&lt;/p&gt;
&lt;p&gt;沦落凡尘二十年 ­&lt;/p&gt;
&lt;p&gt;修成正果还夙愿 ­&lt;/p&gt;
&lt;p&gt;可否邂逅女娲仙 ­&lt;/p&gt;
&lt;p&gt;青城峰下，顽石无材，奈何补苍天？   ­&lt;/p&gt;
&lt;p&gt;余，本一顽石，出自寒门，历二十载，沐山川之灵秀，秉日月之精华，终修成正果，甲申年秋
      
    
    </summary>
    
      <category term="杂谈" scheme="http://abulo.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
</feed>
